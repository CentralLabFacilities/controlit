#include <memory>
#include <gtest/gtest.h>
#include <rbdl/rbdl.h>
#include <controlit/addons/eigen/LinearAlgebra.hpp>

class SVDTest : public ::testing::Test
{
protected:
  virtual void SetUp()
  {
    A.resize(12, 7);
    A << -1.48497e-08,-0.00306431,-0.0983334,-0.00306431,0.0983334,-0.0766964,-0.0766964,
        1.01571,0.229065,-0.11941,0.259536,0.11941,-0.0335649,0.0273779,
        4.7239e-09,-0.00247478,0.0858345,-0.00247478,-0.0858345,0.524398,-0.475602,
        6.9358e-11,0.00538559,     0.165515,   0.00538559 ,   -0.165515 , 0.000358224,0.000358224,
        1.47804e-08,-0.00232128,     0.432818 , -0.00232128 ,   -0.432818  , 0.0763382   , 0.0763382,
        -1.01571,0.712631,   -0.0964836,    -0.317841,    0.0964836,    0.0279719,   -0.0329709,
        1.48497e-08,0.00306431 ,   0.0983334,   0.00306431,   -0.0983334 ,   0.0766964,    0.0766964,
        -1.01571 ,    0.259536,    -0.11941 ,    0.229065 ,     0.11941,    0.0273779,   -0.0335649,
        4.7239e-09,  -0.00247478 ,   0.0858345,  -0.00247478 ,  -0.0858345,    -0.475602,    0.524398,
        -6.9358e-11,  -0.00538559,    -0.165515,  -0.00538559  ,   0.165515, -0.000358224, -0.000358224,
        -1.47804e-08,   0.00232128 ,   -0.432818 ,  0.00232128  ,   0.432818,   -0.0763382,   -0.0763382,
        1.01571,    -0.317841,   -0.0964836 ,    0.712631,    0.0964836,   -0.0329709,    0.0279719;

  }

  virtual void TearDown()
  {
  }

  Matrix A;
};

/* ----------------------------------------------------------------------------
 *  SVD Computation test
 * --------------------------------------------------------------------------*/
TEST_F(SVDTest, EigenTest)
{
  Matrix expectedPinvA(7, 12);
  expectedPinvA <<
    0.0000000000038882, 0.5072663307092357, 0.0300000984564493, -0.0000000000068309, 0.0000000000029423, 0.0149998373203387, -0.0000000000038883, -0.5072663307089169, -0.0300000984501481, 0.0000000000068308, -0.0000000000029423, -0.0149998373200910,
    0.1949012334124492, 1.1188114790585098, 0.0000007157143583, 0.2361551040854917, 0.2361550844566609, 0.9999995558884004, -0.1949012334124497, 0.1188124803005638, 0.0000007157878736, -0.2361551040854919, -0.2361550844566608, 0.0000005559241570,
    0.5000009096656588, 0.0000006000919478, 0.0000016998586233, 0.5000003275100947, 0.5000002128702663, -0.0000007136867673, -0.5000009096656585, 0.0000006000920016, 0.0000016998586265, -0.5000003275100947, -0.5000002128702662, -0.0000007136867660,
    0.1949012334045929, 0.1188124790571870, 0.0000007157079913, 0.2361551040992958, 0.2361550844507148, 0.0000005558871499, -0.1949012334045927, 1.1188114803012419, 0.0000007157815068, -0.2361551040992959, -0.2361550844507149, 0.9999995559249066,
    -0.5000009096656588, -0.0000006000919477, -0.0000016998586232, -0.5000003275100947, -0.5000002128702663, 0.0000007136867674, 0.5000009096656585, -0.0000006000920016, -0.0000016998586265, 0.5000003275100947, 0.5000002128702662, 0.0000007136867659,
    -3.2954744527084139, -0.0000026713314931, 0.9950405197899677, -1.7278148036782659, -0.1861464011075867, 0.0000030679557137, 3.2954744527084121, -0.0000025731162629, -0.0049594744015121, 1.7278148036782655, 0.1861464011075866, 0.0000030708599335,
    -3.2954744527088651, -0.0000026713315114, -0.0049594802103982, -1.7278148036774730, -0.1861464011079281, 0.0000030679556995, 3.2954744527088633, -0.0000025731162814, 0.9950405255981216, 1.7278148036774725, 0.1861464011079280, 0.0000030708599193;

  // std::cout << "A = " << A << std::endl;

  // for(int i = 0; i < 1000; i++)
  // {
  Matrix PinvA;
  drc::common::pseudoInverse(A, 0.0001, PinvA, 0);

  // std::cout << std::scientific << std::fixed << std::setprecision(std::numeric_limits<double>::digits10 + 1) << "PinvA =\n" << PinvA << std::endl;

  EXPECT_TRUE((PinvA - expectedPinvA).norm() < 1e-10)
    << "Problems calculating PinvA.\n"
       " - Computed:\n" << PinvA << "\n"
       " - Expected:\n" << expectedPinvA;
  // }

}

