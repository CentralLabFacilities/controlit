/*
 * Copyright (C) 2015 The University of Texas at Austin and the
 * Institute of Human Machine Cognition. All rights reserved.
 *
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 2.1 of
 * the License, or (at your option) any later version. See
 * <http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html>
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/>
 */

#ifndef __CONTROLIT_LATCHED_TASK__
#define __CONTROLIT_LATCHED_TASK__

#include <controlit/Task.hpp>
#include <controlit/ControlModel.hpp>


#include <controlit/addons/eigen/LinearAlgebra.hpp>

namespace controlit {

using controlit::addons::eigen::Matrix3d;
using controlit::addons::eigen::Vector3d;

class LatchedTask : public Task
{
protected:
    /*!
     * The default constructor.
     */
    explicit LatchedTask();
  
    /*!
     * The constructor.
     *
     * \param[in] instanceName The instance name of this task, e.g., "MyCartPosTask"
     * \param[in] commandType The type of command generated by this task,
     * e.g., force, acceleration, etc.
     * \param[in] activeState The active state that's used by the MainServo thread.
     * \param[in] inactiveState The inactive state that's updated by the TaskUpdater thread.
     */
    explicit LatchedTask(std::string const& instanceName, CommandType commandType,
        TaskState * activeState, TaskState * inactiveState);
  
    /*!
     * Initialize this LatchedTask.
     *
     * \param[in] model The robot's current active control model.
     * Note that this reference should <b>not</b> be stored as a member
     * variable because it may not be the active one.
     */
    virtual bool init(const ControlModel & model);
  
    void updateLatch(ControlModel * model);
  
    //Parameters
    std::string frameName_;
    int frameId_;
    int latchOn_;
    int resetLatch_;
  
    /*!
     * Parameter pointers to avoid "lookup" calls
     */
    controlit::Parameter * paramLatchOn;
    controlit::Parameter * paramResetLatch;
  
    //Local variables to store latched state
    int isLatched;
    Matrix3d latchedRotation;
    Vector3d latchedTranslation;

private:
    /*!
     * Reveals this task's parameters to the ParameterReflection infrastructure.
     */
    void setupParameters();
};

} // namespace controlit

#endif // _CONTROLIT_TASK_HPP

